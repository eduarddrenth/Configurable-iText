#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// com.vectorprint.configuration.parameters.MultipleValueParser
	c2584 [label=<<table title="com.vectorprint.configuration.parameters.MultipleValueParser" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../parameters/MultipleValueParser.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> MultipleValueParser </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + STRING_PARSER : MultipleValueParser.StringParser </td></tr>
<tr><td align="left" balign="left"> + INT_PARSER : MultipleValueParser.IntParser </td></tr>
<tr><td align="left" balign="left"> + CHAR_PARSER : MultipleValueParser.CharParser </td></tr>
<tr><td align="left" balign="left"> + SHORT_PARSER : MultipleValueParser.ShortParser </td></tr>
<tr><td align="left" balign="left"> + BYTE_PARSER : MultipleValueParser.ByteParser </td></tr>
<tr><td align="left" balign="left"> + LONG_PARSER : MultipleValueParser.LongParser </td></tr>
<tr><td align="left" balign="left"> + FLOAT_PARSER : MultipleValueParser.FloatParser </td></tr>
<tr><td align="left" balign="left"> + DOUBLE_PARSER : MultipleValueParser.DoubleParser </td></tr>
<tr><td align="left" balign="left"> + URL_PARSER : MultipleValueParser.URLParser </td></tr>
<tr><td align="left" balign="left"> + CLASS_PARSER : MultipleValueParser.ClassParser </td></tr>
<tr><td align="left" balign="left"> + BOOLEAN_PARSER : MultipleValueParser.BooleanParser </td></tr>
<tr><td align="left" balign="left"> + COLOR_PARSER : MultipleValueParser.ColorParser </td></tr>
<tr><td align="left" balign="left"> + DATE_PARSER : MultipleValueParser.DateParser </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getParamInstance() : MultipleValueParser </td></tr>
<tr><td align="left" balign="left"> + getInstance() : MultipleValueParser </td></tr>
<tr><td align="left" balign="left"> + parseValues(values : String, parser : ValueParser&lt;T&gt;, trim : boolean) : List&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + parseFloatValues(values : String, trim : boolean) : List&lt;Float&gt; </td></tr>
<tr><td align="left" balign="left"> + parseDateValues(values : String, trim : boolean) : List&lt;Date&gt; </td></tr>
<tr><td align="left" balign="left"> + parseLongValues(values : String, trim : boolean) : List&lt;Long&gt; </td></tr>
<tr><td align="left" balign="left"> + parseCharValues(values : String, trim : boolean) : List&lt;Character&gt; </td></tr>
<tr><td align="left" balign="left"> + parseShortValues(values : String, trim : boolean) : List&lt;Short&gt; </td></tr>
<tr><td align="left" balign="left"> + parseByteValues(values : String, trim : boolean) : List&lt;Byte&gt; </td></tr>
<tr><td align="left" balign="left"> + parseDoubleValues(values : String, trim : boolean) : List&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + parseIntValues(values : String, trim : boolean) : List&lt;Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + parseStringValues(values : String, trim : boolean) : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + parseURLValues(values : String, trim : boolean) : List&lt;URL&gt; </td></tr>
<tr><td align="left" balign="left"> + parseClassValues(values : String, trim : boolean) : List&lt;Class&lt;&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + parseColorValues(values : String, trim : boolean) : List&lt;Color&gt; </td></tr>
<tr><td align="left" balign="left"> + parseBooleanValues(values : String, trim : boolean) : List&lt;Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + classFromKey(key : String) : Class&lt;&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="../parameters/MultipleValueParser.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// com.vectorprint.configuration.parser.SimpleCharStream
	c2640 [label=<<table title="com.vectorprint.configuration.parser.SimpleCharStream" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SimpleCharStream.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SimpleCharStream </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + staticFlag : boolean </td></tr>
<tr><td align="left" balign="left"> + bufpos : int </td></tr>
<tr><td align="left" balign="left"> # bufline : int[] </td></tr>
<tr><td align="left" balign="left"> # bufcolumn : int[] </td></tr>
<tr><td align="left" balign="left"> # column : int </td></tr>
<tr><td align="left" balign="left"> # line : int </td></tr>
<tr><td align="left" balign="left"> # prevCharIsCR : boolean </td></tr>
<tr><td align="left" balign="left"> # prevCharIsLF : boolean </td></tr>
<tr><td align="left" balign="left"> # inputStream : Reader </td></tr>
<tr><td align="left" balign="left"> # buffer : char[] </td></tr>
<tr><td align="left" balign="left"> # maxNextCharInd : int </td></tr>
<tr><td align="left" balign="left"> # inBuf : int </td></tr>
<tr><td align="left" balign="left"> # tabSize : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SimpleCharStream(dstream : Reader, startline : int, startcolumn : int, buffersize : int) </td></tr>
<tr><td align="left" balign="left"> + SimpleCharStream(dstream : Reader, startline : int, startcolumn : int) </td></tr>
<tr><td align="left" balign="left"> + SimpleCharStream(dstream : Reader) </td></tr>
<tr><td align="left" balign="left"> + SimpleCharStream(dstream : InputStream, encoding : String, startline : int, startcolumn : int, buffersize : int) </td></tr>
<tr><td align="left" balign="left"> + SimpleCharStream(dstream : InputStream, startline : int, startcolumn : int, buffersize : int) </td></tr>
<tr><td align="left" balign="left"> + SimpleCharStream(dstream : InputStream, encoding : String, startline : int, startcolumn : int) </td></tr>
<tr><td align="left" balign="left"> + SimpleCharStream(dstream : InputStream, startline : int, startcolumn : int) </td></tr>
<tr><td align="left" balign="left"> + SimpleCharStream(dstream : InputStream, encoding : String) </td></tr>
<tr><td align="left" balign="left"> + SimpleCharStream(dstream : InputStream) </td></tr>
<tr><td align="left" balign="left"> # setTabSize(i : int) </td></tr>
<tr><td align="left" balign="left"> # getTabSize(i : int) : int </td></tr>
<tr><td align="left" balign="left"> # ExpandBuff(wrapAround : boolean) </td></tr>
<tr><td align="left" balign="left"> # FillBuff() </td></tr>
<tr><td align="left" balign="left"> + BeginToken() : char </td></tr>
<tr><td align="left" balign="left"> # UpdateLineColumn(c : char) </td></tr>
<tr><td align="left" balign="left"> + readChar() : char </td></tr>
<tr><td align="left" balign="left"> + getColumn() : int </td></tr>
<tr><td align="left" balign="left"> + getLine() : int </td></tr>
<tr><td align="left" balign="left"> + getEndColumn() : int </td></tr>
<tr><td align="left" balign="left"> + getEndLine() : int </td></tr>
<tr><td align="left" balign="left"> + getBeginColumn() : int </td></tr>
<tr><td align="left" balign="left"> + getBeginLine() : int </td></tr>
<tr><td align="left" balign="left"> + backup(amount : int) </td></tr>
<tr><td align="left" balign="left"> + ReInit(dstream : Reader, startline : int, startcolumn : int, buffersize : int) </td></tr>
<tr><td align="left" balign="left"> + ReInit(dstream : Reader, startline : int, startcolumn : int) </td></tr>
<tr><td align="left" balign="left"> + ReInit(dstream : Reader) </td></tr>
<tr><td align="left" balign="left"> + ReInit(dstream : InputStream, encoding : String, startline : int, startcolumn : int, buffersize : int) </td></tr>
<tr><td align="left" balign="left"> + ReInit(dstream : InputStream, startline : int, startcolumn : int, buffersize : int) </td></tr>
<tr><td align="left" balign="left"> + ReInit(dstream : InputStream, encoding : String) </td></tr>
<tr><td align="left" balign="left"> + ReInit(dstream : InputStream) </td></tr>
<tr><td align="left" balign="left"> + ReInit(dstream : InputStream, encoding : String, startline : int, startcolumn : int) </td></tr>
<tr><td align="left" balign="left"> + ReInit(dstream : InputStream, startline : int, startcolumn : int) </td></tr>
<tr><td align="left" balign="left"> + GetImage() : String </td></tr>
<tr><td align="left" balign="left"> + GetSuffix(len : int) : char[] </td></tr>
<tr><td align="left" balign="left"> + Done() </td></tr>
<tr><td align="left" balign="left"> + adjustBeginLineColumn(newLine : int, newCol : int) </td></tr>
		</table></td></tr>
		</table>>, URL="./SimpleCharStream.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// com.vectorprint.configuration.parser.Token
	c2643 [label=<<table title="com.vectorprint.configuration.parser.Token" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Token.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Token </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + kind : int </td></tr>
<tr><td align="left" balign="left"> + beginLine : int </td></tr>
<tr><td align="left" balign="left"> + beginColumn : int </td></tr>
<tr><td align="left" balign="left"> + endLine : int </td></tr>
<tr><td align="left" balign="left"> + endColumn : int </td></tr>
<tr><td align="left" balign="left"> + image : String </td></tr>
<tr><td align="left" balign="left"> + next : Token </td></tr>
<tr><td align="left" balign="left"> + specialToken : Token </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Token() </td></tr>
<tr><td align="left" balign="left"> + Token(kind : int) </td></tr>
<tr><td align="left" balign="left"> + Token(kind : int, image : String) </td></tr>
<tr><td align="left" balign="left"> + getValue() : Object </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + newToken(ofKind : int, image : String) : Token </td></tr>
<tr><td align="left" balign="left"> + newToken(ofKind : int) : Token </td></tr>
		</table></td></tr>
		</table>>, URL="./Token.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// com.vectorprint.configuration.parser.MultiValueParamParserTokenManager
	c2651 [label=<<table title="com.vectorprint.configuration.parser.MultiValueParamParserTokenManager" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./MultiValueParamParserTokenManager.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> MultiValueParamParserTokenManager </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + debugStream : PrintStream </td></tr>
<tr><td align="left" balign="left"> + jjstrLiteralImages : String[] </td></tr>
<tr><td align="left" balign="left"> + lexStateNames : String[] </td></tr>
<tr><td align="left" balign="left"> # input_stream : SimpleCharStream </td></tr>
<tr><td align="left" balign="left"> # curChar : char </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + MultiValueParamParserTokenManager(stream : SimpleCharStream) </td></tr>
<tr><td align="left" balign="left"> + MultiValueParamParserTokenManager(stream : SimpleCharStream, lexState : int) </td></tr>
<tr><td align="left" balign="left"> + setDebugStream(ds : PrintStream) </td></tr>
<tr><td align="left" balign="left"> + ReInit(stream : SimpleCharStream) </td></tr>
<tr><td align="left" balign="left"> + ReInit(stream : SimpleCharStream, lexState : int) </td></tr>
<tr><td align="left" balign="left"> + SwitchTo(lexState : int) </td></tr>
<tr><td align="left" balign="left"> # jjFillToken() : Token </td></tr>
<tr><td align="left" balign="left"> + getNextToken() : Token </td></tr>
		</table></td></tr>
		</table>>, URL="./MultiValueParamParserTokenManager.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// com.vectorprint.configuration.parser.MultiValueParamParser
	c2653 [label=<<table title="com.vectorprint.configuration.parser.MultiValueParamParser" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./MultiValueParamParser.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> MultiValueParamParser </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + token_source : MultiValueParamParserTokenManager </td></tr>
<tr><td align="left" balign="left"> + token : Token </td></tr>
<tr><td align="left" balign="left"> + jj_nt : Token </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + MultiValueParamParser(stream : InputStream) </td></tr>
<tr><td align="left" balign="left"> + MultiValueParamParser(stream : InputStream, encoding : String) </td></tr>
<tr><td align="left" balign="left"> + MultiValueParamParser(stream : Reader) </td></tr>
<tr><td align="left" balign="left"> + MultiValueParamParser(tm : MultiValueParamParserTokenManager) </td></tr>
<tr><td align="left" balign="left"> + parse() : List&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + ReInit(stream : InputStream) </td></tr>
<tr><td align="left" balign="left"> + ReInit(stream : InputStream, encoding : String) </td></tr>
<tr><td align="left" balign="left"> + ReInit(stream : Reader) </td></tr>
<tr><td align="left" balign="left"> + ReInit(tm : MultiValueParamParserTokenManager) </td></tr>
<tr><td align="left" balign="left"> + getNextToken() : Token </td></tr>
<tr><td align="left" balign="left"> + getToken(index : int) : Token </td></tr>
<tr><td align="left" balign="left"> + generateParseException() : ParseException </td></tr>
<tr><td align="left" balign="left"> + enable_tracing() </td></tr>
<tr><td align="left" balign="left"> + disable_tracing() </td></tr>
		</table></td></tr>
		</table>>, URL="./MultiValueParamParser.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// com.vectorprint.configuration.parser.MultiValueParamParserConstants
	c2658 [label=<<table title="com.vectorprint.configuration.parser.MultiValueParamParserConstants" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./MultiValueParamParserConstants.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> MultiValueParamParserConstants </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EOF : int </td></tr>
<tr><td align="left" balign="left"> + PIPE : int </td></tr>
<tr><td align="left" balign="left"> + ESC_PIPE : int </td></tr>
<tr><td align="left" balign="left"> + VALUE : int </td></tr>
<tr><td align="left" balign="left"> + DEFAULT : int </td></tr>
<tr><td align="left" balign="left"> + tokenImage : String[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		</table>>, URL="./MultiValueParamParserConstants.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//com.vectorprint.configuration.parser.MultiValueParamParserTokenManager implements com.vectorprint.configuration.parser.MultiValueParamParserConstants
	c2658:p -> c2651:p [dir=back,arrowtail=empty,style=dashed];
	//com.vectorprint.configuration.parser.MultiValueParamParser implements com.vectorprint.configuration.parser.MultiValueParamParserConstants
	c2658:p -> c2653:p [dir=back,arrowtail=empty,style=dashed];
	// com.vectorprint.configuration.parameters.MultipleValueParser COMPOSED com.vectorprint.configuration.parser.MultiValueParamParser
	c2584:p -> c2653:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=none, arrowtail=diamond, dir=both];
	// com.vectorprint.configuration.parser.Token COMPOSED com.vectorprint.configuration.parser.Token
	c2643:p -> c2643:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=none, arrowtail=diamond, dir=both];
	// com.vectorprint.configuration.parser.Token COMPOSED com.vectorprint.configuration.parser.Token
	c2643:p -> c2643:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=none, arrowtail=diamond, dir=both];
	// com.vectorprint.configuration.parser.MultiValueParamParserTokenManager COMPOSED com.vectorprint.configuration.parser.SimpleCharStream
	c2651:p -> c2640:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=none, arrowtail=diamond, dir=both];
	// com.vectorprint.configuration.parser.MultiValueParamParser COMPOSED com.vectorprint.configuration.parser.MultiValueParamParserTokenManager
	c2653:p -> c2651:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=none, arrowtail=diamond, dir=both];
	// com.vectorprint.configuration.parser.MultiValueParamParser COMPOSED com.vectorprint.configuration.parser.SimpleCharStream
	c2653:p -> c2640:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=none, arrowtail=diamond, dir=both];
	// com.vectorprint.configuration.parser.MultiValueParamParser COMPOSED com.vectorprint.configuration.parser.Token
	c2653:p -> c2643:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=none, arrowtail=diamond, dir=both];
	// com.vectorprint.configuration.parser.MultiValueParamParser COMPOSED com.vectorprint.configuration.parser.Token
	c2653:p -> c2643:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=none, arrowtail=diamond, dir=both];
}

